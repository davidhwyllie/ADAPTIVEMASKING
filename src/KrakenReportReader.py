#!/usr/bin/env python
 
# analyses kraken files

# necessary libraries
import os
import csv
import pandas as pd
import unittest

class KrakenReportReader():
	""" provides a simple summary of data from the output files ('.report' files) generated by Kraken and Braken.
	For details of these metagenomic classification tools, see:
	https://ccb.jhu.edu/software/kraken/
	https://ccb.jhu.edu/software/bracken/
	
	The concept is that in the reads analysed, there are three kinds of data:
	* Reads from Genus of interest (goi).  In our case, the genus is Mycobacterium.
	 (see: https://www.biorxiv.org/content/early/2018/01/23/252460)
	  Within this goi, species level assignations are reported.

	* Reads from other bacterial species
	* Eukaryotic reads
	
	The genus of interest is provided to the constructor.
	The .parse() method analyses a Kraken report and returns, in a tabular format,
	information categorising the Kraken output into the three groups above.
	
	Example usage:
	krr = KrakenReportReader(genus_of_interest = 'Mycobacterium')
	inputfile = os.path.join('..','testdata','test1.kraken_report')
	result = krr.simplify(inputfile= inputfile, guid = 'test1')
	print(result)
	
	# get details
	outputfile = os.path.join('..','unittest_tmp','output.csv')
	krr.genera.to_csv(outputfile)

	"""
	
	def __init__(self, genus_of_interest = 'Mycobacterium'):
		""" set up a Kraken report reader object.
		Arguments:
			genus_of_interest: a string, which if present in the Kraken report's scientific name field, indicates that the
			row in the report refers to a genus of interest.  In our case, genus_of_interest was 'Mycobacterium'
			
		Returns:
			None
		"""
		self.genus_of_interest = genus_of_interest
	
	def simplify(self, inputfile, guid):
		""" parse and simplify a Kraken report file
		
		Arguments:
			inputfile: a Kraken report file
			guid: an identifier for the sample
			
		Returns:
		    returns a dictionary, example:
			{'V': 931, 'B': 61, 'sampleId': 'test1', 'M': 1226, 'E': 81, 'nReads': 2299}
			Where:
			V is an estimate of the number of viral reads
			B is an estimate of the number of bacterial reads which don't correspond to self.genus_of_interest
			E is an estimate of the number of eukaryotic reads
			M is an estimate of the number of reads belonging to self.genus_of_interest.
			nReads is the the total number of classified reads
			sampleId is the guid provided
			
			also sets self.genera (a pandas data frame) containing genus level information, from which the above summary is computed.
			
		"""
		
		# read the Kraken report into memory.
		with open(inputfile,'rt') as f:
				# as a pandas dataframe, supplying the headers as these are missing from Kraken reports.
				df = pd.read_csv(f, sep=None, header=None, engine='python')
				df.columns = ['pcBelow','nBelow','nAt','rankCode','taxId','sciName']

				# identify clades; we want column 0 where column 4 == 'D'			# percent rooted at this clade
				clades = df.query('rankCode in ("D")', inplace=False).copy()		

				# identify any entries related to 'genus_of_interest' to species level
				is_genus_of_interest = df[df.sciName.str.contains(self.genus_of_interest)].copy()
				is_genus_of_interest = is_genus_of_interest.query('rankCode=="S"')	

				# identify bacterial, eukaryotic and viral sequences.			
				genera = df.query('rankCode in ("G")', inplace=False).copy()		# genera

				def get_start(clades, taxId):
					""" gets the index (row number) for a particular taxon """
					start = None
					start_vector = clades.index[clades.taxId==taxId].copy()
					if len(start_vector == 1):
						start = int(start_vector[0])
					return(start)
				
				# the below numbers relate to the NCBI taxonomy
				bacterial_start = get_start(clades, taxId=2)		# bacteria
				eukaryotic_start = get_start(clades, taxId=2759)	# eukaryotes
				viral_start = get_start(clades, taxId=10239)		# viruses
				report_end = max(genera.index)

				# create a column denoting Bacteria/ Eukaryota/ Viruses; one additional category 'M' denotes the genus of interest
				is_genus_of_interest['bev'] = 'M'		# denotes the genus_of_interest
								
				genera['bev'] = None
				if not bacterial_start is None:
					genera.loc[genera.index > bacterial_start, 'bev'] = 'B'
				if not eukaryotic_start is None:
					genera.loc[genera.index > eukaryotic_start, 'bev'] = 'E'
				if not viral_start is None:
					genera.loc[genera.index > viral_start, 'bev'] = 'V'
					
				# remove is_genus_of_interest from general genus
				genera = genera[genera.sciName.str.contains(self.genus_of_interest)==False]
				
				# merge in species level information for the genus of interest
				self.genera = is_genus_of_interest.append(genera, ignore_index=True)
				self.genera['guid'] = guid
				
				# compute sum(nBelow) by bev
				by_bev = self.genera.groupby(['bev'])['nBelow'].sum()
				by_bev_dict = by_bev.to_dict()
				by_bev_dict['nReads'] = sum(self.genera['nBelow'])
				by_bev_dict['sampleId'] = guid
				
				mandatory_fields = ['B','E','V','M']
				for mandatory_field in mandatory_fields:
					if not mandatory_field in by_bev_dict.keys():
						by_bev_dict[mandatory_field] = 0
				return(by_bev_dict)
			
	

class test_KrakenReader_1(unittest.TestCase):
	def runTest(self):
		""" tests Kraken report parsing """
		krr = KrakenReportReader(genus_of_interest = 'Mycobacterium')
		inputfile = os.path.join('..','testdata','test1.kraken_report')
		result = krr.simplify(inputfile= inputfile, guid = 'test1')
		
		self.assertEqual(result, {'V': 931, 'B': 61, 'sampleId': 'test1', 'M': 1226, 'E': 81, 'nReads': 2299})
						 
		outputfile = os.path.join('..','unittest_tmp','output.csv')
		if os.path.exists(outputfile):
			os.unlink(outputfile)
		krr.genera.to_csv(outputfile)
		self.assertTrue(os.path.exists(outputfile))
#with open(output_csv, 'wt') as f:
#	krr.genera.to_csv(f, index=False)
#print("{0} kraken reports are missing and were loaded; {1} are present. Downloading {2} failed.".format(missing, found, failed))

